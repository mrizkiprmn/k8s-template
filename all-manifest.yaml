apiVersion: apps/v1
kind: Deployment
metadata:
  name: servicename
  namespace: namespace
spec:
  replicas: 1
  selector:
    matchLabels:
      app: servicename
  template:
    metadata:
      annotations:
        prome/example: "true"
        prome/port: "1234"
      labels:
        app: servicename
    spec:
      imagePullSecrets:
        - name: image secret
      containers:
      - name: servicename
        image: registry image
        imagePullPolicy: Always
        ports:
        - containerPort: 80
        envFrom:
          - configMapRef:
              name: cfg
      
---

apiVersion: v1
kind: Service
metadata:
  annotations:
  labels:
    app.kubernetes.io/instance: servicename
    app.kubernetes.io/name: servicename
  name: servicename
  namespace: namespace
spec:
  type: NodePort/LoadBalancer/ClusterIP
  ports:
  - name: http
    port: 3000
    protocol: TCP
    targetPort: 3000
  selector:
    app.kubernetes.io/instance: servicename
    app.kubernetes.io/name: servicename


---

apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  annotations:
    cert-manager.io/cluster-issuer: letsencrypt
  name: servicename
  namespace: namespace
spec:
  ingressClassName: ingressClassName 
  rules:
  - host: example.com
    http:
      paths:
      - backend:
          service:
            name: servicename
            port:
              number: 9090
        pathType: ImplementationSpecific
  tls:
  - hosts:
    - example.com
    secretName: tls-name


---

apiVersion: v1
kind: ConfigMap
metadata:
  name: your service name
  namespace: your namespace
data:
  ENVIRONMENT: "your env"


---

apiVersion: v1
data:
  .dockerconfigjson: random secret
kind: Secret
metadata:
  name: secret name
  namespace: your namespace
type: kubernetes.io/dockerconfigjson
